package com.youku.login.network;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.ProtocolException;import java.net.SocketTimeoutException;import java.net.URL;import java.util.List;import java.util.Map;import org.apache.http.Header;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.json.JSONException;import org.json.JSONObject;import android.annotation.SuppressLint;import android.text.TextUtils;import com.alibaba.fastjson.JSON;import com.baseproject.image.Utils;import com.example.youkuloginsdk.R;import com.youku.login.util.Logger;import com.youku.login.util.Youku;import com.youku.login.util.YoukuUtil;/** * * HTTP请求类 使用方法示例： Initial initial = new Initial(); IHttpRequest httpRequest = * YoukuService.getService(IHttpRequest.class, true); HttpIntent httpIntent = * new HttpIntent(URLContainer.getInitURL()); *  * httpRequest.request(httpIntent, new IHttpRequestCallBack() { *  * @Override public void onSuccess(HttpRequestManager httpRequestManager) { *           initial = httpRequestManager.parse(initial); } * @Override public void onFailed(String failReason) { *  *           } }); *  * @author fengqve *  */@SuppressLint("NewApi")public class HttpRequestManager implements IHttpRequest {	/** 无网络连接错误提示 */	public static final String STATE_ERROR_WITHOUT_NETWORK = Youku.mContext			.getString(R.string.tips_no_network);	/** 网络超时错误提示 */	public static final String STATE_ERROR_TIMEOUT = Youku.mContext			.getString(R.string.tips_not_responding);	/** IO异常错误提示 */	public static final String STATE_ERROR_IO_EXCEPTION = "IO异常哦";	/** 协议错误提示 */	public static final String STATE_ERROR_PROTOCOL_EXCEPTION = "协议不正确哦";	/** URL地址错误提示 */	public static final String STATE_ERROR_MALFORMED_URL_EXCEPTION = "地址不合法哦";	/** 请求失败，请稍后再试错误提示 */	public static final String STATE_ERROR_REQUEST_DATA_FAIL = "请求失败，请稍后再试 ";	private static final String USER_AGENT = "User-Agent";	private static final String IF_NONE_MATCH = "if-None-Match";	private static final String COOKIE = "Cookie";	private static final String ETAG = "Etag";	private static final String AD_COOKIE = "ad_cookie";	private static final int SUCCESS = 0x1;	private static final int FAIL = 0x2;	private YoukuAsyncTask<Object, Integer, Object> task;	/** 执行状态 */	private int state = FAIL;	private String method = METHOD_GET;	private boolean isSetCookie;	private boolean isSaveCookie;		/**	 * 是否非http返回的错误信息 	 */	private boolean isParseErrorCode;	/** 是否缓存接口数据 */	private boolean isCacheData;	/**	 * 是否是可能带广告链接	 */	private boolean isAdIntent;	/**	 * 默认连接超时, 默认读取超时	 */	private int connect_timeout_millis, read_timout_millis;	/**	 * 失败原因	 */	private String fail_reason;	/**	 * 传递过来需要解析的数据对象	 */	// private Object dataObject;	/**	 * 从网络拿到的数据	 */	private String dataString;	/**	 * 请求的url地址	 */	private String uri;	private String formatUri;	private String eTag;	/**	 * 处理数据时是否cancle。	 */	private boolean IScancle = false;	public HttpRequestManager() {	}	/**	 * 是否保存Cookie	 * 	 * @param isSaveCookie	 */	public void setSaveCookie(boolean isSaveCookie) {		this.isSaveCookie = isSaveCookie;	}	/**	 * 是否保存Cookie	 * 	 * @param isSaveCookie	 */	public void setParseErrorCode(boolean isParseErrorCode) {		this.isParseErrorCode = isParseErrorCode;	}	/**	 * 设置请求方法	 * 	 * @param method	 */	public void setMethod(String method) {		this.method = method;	}	/**	 * @return 本地数据是否可用	 */	private boolean isLocalDataAvailable() {		if (dataString != null) {			try {				new JSONObject(dataString);				if (isAdIntent == false && dataString.contains("[]")) {					return false;				}				return true;			} catch (Exception e) {			}		}		return false;	}	/**	 * 下载给出Uri的数据	 * 	 * @param uri	 * @param method	 * @param isSetCookie	 * @return	 * @throws NullPointerException	 */	private String downloadUri(String uri, String method, boolean isSetCookie)			throws NullPointerException {		if (isCacheData) {			// v3.6接口缓存处理			formatUri = NetworkUtils.formatURL(uri, isSetCookie);			eTag = Youku.getPreference(formatUri);			if (eTag != null && eTag.length() != 0) {				try {					dataString = NetworkUtils.readUrlCacheFromLocal(formatUri);				} catch (Exception e) {					Logger.e("HttpRequestManager", e);				}			}		}		if (YoukuUtil.hasInternet()) {		  //XXX			isAdIntent = uri.contains("/adv/");			if (!isAdIntent) {				Utils.disableConnectionReuseIfNecessary();				InputStream is = null;				try {					URL url = new URL(uri);					Logger.d("HttpRequestManager#downloadUri()", uri);					HttpURLConnection conn = (HttpURLConnection) url							.openConnection();					conn.setReadTimeout(read_timout_millis);					conn.setConnectTimeout(connect_timeout_millis);					conn.setRequestMethod(method);					conn.setDoInput(true);					if (isCacheData && isLocalDataAvailable())// v3.6接口缓存处理						conn.setRequestProperty(IF_NONE_MATCH, eTag);					if (isSetCookie)						conn.setRequestProperty(COOKIE,								Youku.getPreference("cookie"));					// Logger.d("nathan", "Youku.COOKIE:"+Youku.COOKIE);					conn.setRequestProperty(USER_AGENT, Youku.User_Agent);					conn.connect();// Starts the query					int response = conn.getResponseCode();					eTag = conn.getHeaderField(ETAG);					if (response == HttpURLConnection.HTTP_OK) {						saveLogin_cookie(conn);						is = conn.getInputStream();						dataString = YoukuUtil.convertStreamToString(is);						state = SUCCESS;						if (isCacheData) {							NetworkUtils.saveUrlCacheToLocal(formatUri, eTag,									dataString);						}					} else if (response == HttpURLConnection.HTTP_NO_CONTENT) {						saveLogin_cookie(conn);						state = SUCCESS;					} else if (response == HttpURLConnection.HTTP_NOT_MODIFIED) {						saveLogin_cookie(conn);						state = SUCCESS;					} else if (response == HttpURLConnection.HTTP_GONE) {						is = conn.getErrorStream();						double d = Double.parseDouble(YoukuUtil								.convertStreamToString(is));						URLContainer.TIMESTAMP = (long) d								- System.currentTimeMillis() / 1000;						this.uri = URLContainer.updateUrl(this.uri, method);						downloadUri(this.uri, method, isSetCookie);					} else {						if (isCommentUrl(url)||isParseErrorCode) {							compatibleWithCommentError(conn);						} else {							fail_reason = "错误" + response + "，请稍后再试。";						}					}					return dataString;				} catch (MalformedURLException e) {					e.printStackTrace();					fail_reason = STATE_ERROR_TIMEOUT;					return dataString;				} catch (ProtocolException e) {					e.printStackTrace();					fail_reason = STATE_ERROR_TIMEOUT;					return dataString;				} catch (SocketTimeoutException e) {					e.printStackTrace();					fail_reason = STATE_ERROR_TIMEOUT;					return dataString;				} catch (IOException e) {					e.printStackTrace();					fail_reason = STATE_ERROR_TIMEOUT;					return dataString;				} catch (Exception e) {					e.printStackTrace();					fail_reason = STATE_ERROR_TIMEOUT;					return dataString;				} finally {					if (null != is) {						try {							is.close();						} catch (IOException e) {						}					}				}			} else {				return downloadAdUrl(uri);			}		} else {			fail_reason = STATE_ERROR_WITHOUT_NETWORK;			return dataString;		}	}	/**	 * 兼容评论接口的ErrorStream	 * 	 * @param conn	 */	private void compatibleWithCommentError(HttpURLConnection conn) {		final InputStream errorStream = conn.getErrorStream();		final String errorStreamString = (null == errorStream) ? "" : YoukuUtil				.convertStreamToString(errorStream);		fail_reason = errorStreamString;		if (!TextUtils.isEmpty(errorStreamString)) {			try {				JSONObject j = new JSONObject(errorStreamString);				fail_reason = String.valueOf(j.optInt("code"));			} catch (JSONException e) {				fail_reason = STATE_ERROR_TIMEOUT;				Logger.e(Youku.TAG_GLOBAL, "HttpRequestManager#downloadUri()",						e);			}		}	}	/**	 * 是否是评论接口	 * 	 * @param url	 * @return	 */	private boolean isCommentUrl(URL url) {		return url.getPath().contains("/comment/add");	}	/**	 * 是否是二维码扫描接口	 * 	 * @param url	 * @return	 */	private boolean isCaptureUrl(URL url) {		return url.getPath().contains("/thirdpart/snapshot");	}	private void saveAd_cookie(HttpResponse httpResponse) {		Header[] headers = httpResponse.getHeaders("Set-Cookie");		StringBuffer s = new StringBuffer();		for (Header header : headers) {			s.append(header.getValue());			s.append(";");		}		String ad_cookie = s.toString();		if (!TextUtils.isEmpty(ad_cookie)) {			Youku.savePreference(AD_COOKIE, ad_cookie);		}	}	public void saveLogin_cookie(HttpURLConnection conn) {		if (isSaveCookie) {			Map<String, List<String>> header = conn.getHeaderFields();			StringBuilder builder = new StringBuilder();			for (Map.Entry<String, List<String>> entry : header.entrySet()) {				String key = entry.getKey();				for (String value : entry.getValue()) {					if ("Set-Cookie".equals(key)) {						builder.append(value);						builder.append(";");					}					//System.out.println(key + ":" + value);				}			}			String cookieStr = builder.toString();			if (!TextUtils.isEmpty(cookieStr)) {				Youku.COOKIE = cookieStr;				Youku.savePreference("cookie", cookieStr);			}			Logger.lxf("==被保存的cookie值===========" + builder.toString());		}	}	/**	 * 下载广告接口数据	 * 	 * @param uri	 * @return	 */	private String downloadAdUrl(String uri) {		HttpParams p = new BasicHttpParams();		HttpConnectionParams.setConnectionTimeout(p, connect_timeout_millis);// 建立链接的时间		HttpConnectionParams.setSoTimeout(p, read_timout_millis);// 等数据的时间		DefaultHttpClient httpClient = new DefaultHttpClient(p);		HttpGet httpGet = new HttpGet(uri);		httpGet.setHeader(USER_AGENT, Youku.User_Agent);		if (isCacheData && isLocalDataAvailable())// v3.6接口缓存处理			httpGet.setHeader(IF_NONE_MATCH, eTag);		final String localAdCookie = Youku.getPreference(AD_COOKIE);		if (Youku.isLogined) {			httpGet.setHeader(					COOKIE,					!TextUtils.isEmpty(localAdCookie) ? (Youku.COOKIE + localAdCookie)							: Youku.COOKIE);		} else if (!TextUtils.isEmpty(localAdCookie)) {			httpGet.setHeader(COOKIE, localAdCookie);		}		HttpResponse httpResponse;		InputStream is = null;		try {			httpResponse = httpClient.execute(httpGet);			int response = httpResponse.getStatusLine().getStatusCode();			Header[] headers = httpResponse.getAllHeaders();			for (Header header : headers) {				if (ETAG.equals(header.getName())) {					eTag = header.getValue();					break;				}			}			if (response == HttpURLConnection.HTTP_OK) {				is = httpResponse.getEntity().getContent();				dataString = YoukuUtil.convertStreamToString(is);				state = SUCCESS;				saveAd_cookie(httpResponse);				if (isCacheData) {					NetworkUtils.saveUrlCacheToLocal(formatUri, eTag,							dataString);				}			} else if (response == HttpURLConnection.HTTP_BAD_REQUEST) {				is = httpResponse.getEntity().getContent();				fail_reason = YoukuUtil.convertStreamToString(is);			} else if (response == HttpURLConnection.HTTP_NOT_MODIFIED) {				saveAd_cookie(httpResponse);				state = SUCCESS;			} else if (response == HttpURLConnection.HTTP_GONE) {				is = httpResponse.getEntity().getContent();				double d = Double.parseDouble(YoukuUtil						.convertStreamToString(is));				URLContainer.TIMESTAMP = (long) d - System.currentTimeMillis()						/ 1000;				this.uri = URLContainer.updateUrl(this.uri, method);				downloadAdUrl(this.uri);			} else {				fail_reason = STATE_ERROR_TIMEOUT;			}		} catch (ClientProtocolException e) {			e.printStackTrace();			fail_reason = STATE_ERROR_TIMEOUT;		} catch (IOException e) {			e.printStackTrace();			fail_reason = STATE_ERROR_TIMEOUT;		} catch (IllegalStateException e) {			e.printStackTrace();			fail_reason = STATE_ERROR_TIMEOUT;		} catch (Exception e) {			e.printStackTrace();			fail_reason = STATE_ERROR_TIMEOUT;		} finally {			if (null != is) {				try {					is.close();				} catch (IOException e) {				}			}		}		return dataString;	}	/**	 * 解析json数据	 * 	 * @return	 * @throws NullPointerException	 */	@SuppressWarnings("unchecked")	public <T> T parse(T dataObject) throws NullPointerException {		dataObject = (T) JSON.parseObject(dataString, dataObject.getClass());		return dataObject;	}	@Override	public void request(HttpIntent i, final IHttpRequestCallBack callBack) {		uri = i.getStringExtra(HttpIntent.URI);		method = i.getStringExtra(HttpIntent.METHOD);		isSetCookie = i.getBooleanExtra(HttpIntent.IS_SET_COOKIE, false);		isCacheData = i.getBooleanExtra(HttpIntent.IS_CACHE_DATA, true);		connect_timeout_millis = i.getIntExtra(HttpIntent.CONNECT_TIMEOUT, 0);		read_timout_millis = i.getIntExtra(HttpIntent.READ_TIMEOUT, 0);System.out.println("YoukuAsyncTask");							task = new YoukuAsyncTask<Object, Integer, Object>() {			@Override			protected Object doInBackground(Object... params) {				if (callBack != null)					callBack.setHttpRequestManager(HttpRequestManager.this);				return downloadUri(uri, method, isSetCookie);			}			/**			 * @see com.youku.network.YoukuAsyncTask#onPostExecute(java.lang.Object)			 */			@Override			protected void onPostExecute(Object result) {				super.onPostExecute(result);				switch (state) {				case SUCCESS:					if (callBack != null)						callBack.onSuccess(HttpRequestManager.this);					break;				case FAIL:					Logger.d(							"HttpRequestManager.request(...).new YoukuAsyncTask() {...}#onPostExecute()",							fail_reason);					if (callBack != null) {						if (STATE_ERROR_WITHOUT_NETWORK.equals(fail_reason)								&& isCacheData && dataString != null) {							callBack.onLocalLoad(HttpRequestManager.this);						} else {							callBack.onFailed(fail_reason);						}					}					break;				}			}		};		task.execute();	}	@Override	public void cancel() {		IScancle = true;		if (null != task && !task.isCancelled()) {			task.cancel(true);		}	}	@Override	public String getDataString() {		return dataString!=null?dataString:"";	}	@Override	public boolean isCancel() {		return IScancle;	}	/**	 * toast显示错误信息	 * 	 * @param failReason	 */	public static void showTipsFailReason(String failReason) {		if (STATE_ERROR_WITHOUT_NETWORK.equals(failReason)) {			YoukuUtil.showTips(failReason);		} else {			YoukuUtil.showTips(STATE_ERROR_TIMEOUT);		}	}}