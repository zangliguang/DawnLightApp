/* * Copyright © 2012-2013 LiuZhongnan. All rights reserved. *  * Email:qq81595157@126.com *  * PROPRIETARY/CONFIDENTIAL. */package com.youku.login.service;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.HttpVersion;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.HttpPost;import org.apache.http.cookie.Cookie;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.apache.http.params.HttpProtocolParams;import org.apache.http.protocol.HTTP;import org.json.JSONObject;import android.app.NotificationManager;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.text.TextUtils;import com.example.youkuloginsdk.R;import com.youku.login.network.URLContainer;import com.youku.login.upload.UploadInfo;import com.youku.login.util.Logger;import com.youku.login.util.Youku;import com.youku.login.util.YoukuUtil;/** * LoginManagerImpl.登陆模块实现 *  * @author 刘仲男 qq81595157@126.com * @version v3.5 * @created time 2012-9-18 下午4:31:33 */public class LoginManagerImpl extends LoginManager {	// private final int FAILED = -1;	// private final int SUCCESS = 1;	private static final int CON_TIME_OUT_MS = 15 * 1000;	private static final int SO_TIME_OUT_MS = 15 * 1000;	private static final int SOCKET_BUFFER_SIZE = 8 * 1024;	private int state_code;	@Override	public void login(final String username, final String password,			final ICallBack call) {		new AsyncTask<Void, Void, Integer>() {			@Override			protected Integer doInBackground(Void... params) {				String password_temp = password;				try {					HttpParams httpParams = new BasicHttpParams();					// 建立链接的时间					HttpConnectionParams							.setConnectionTimeout(httpParams, 15000);					// 等数据的时间					HttpConnectionParams.setSoTimeout(httpParams, 15000);					DefaultHttpClient httpClient = new DefaultHttpClient(							httpParams);					if (password == null || password.length() != 32) {						password_temp = YoukuUtil.md5(password);					}					HttpPost httpPost = new HttpPost(URLContainer.getLoginURL(							username, password_temp));					httpPost.setHeader("User-Agent", Youku.User_Agent);					HttpResponse httpResponse = httpClient.execute(httpPost);					InputStream is = httpResponse.getEntity().getContent();					String jsonString = YoukuUtil.convertStreamToString(is);					JSONObject obj = new JSONObject(jsonString);					String status = obj.optString("status");					int code = obj.optInt("code");					if (!status.equals("success") && code != 1) {						return code;					}					Logger.d("sgh","----> " + obj.toString());					if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {						Youku.COOKIE = getCookie(httpClient);						Youku.savePreference("cookie", Youku.COOKIE);						obj = obj.getJSONObject("results");						Youku.userName = obj.optString("username");						String uid = obj.optString("userid");						String userIcon = obj.optString("icon_large");						Youku.isLogined = true;						Youku.loginAccount = username;						Youku.savePreference("userIcon", userIcon);						Youku.savePreference("userName", Youku.userName);						Youku.savePreference("loginAccount", Youku.loginAccount);						Youku.savePreference("loginPassword", password_temp);						Youku.savePreference("isNotAutoLogin", false);						Youku.savePreference("isLogined", true);						Youku.savePreference("uid", uid);						tipsChangeDigitNickName(Youku.userName);						Youku.iStaticsManager.trackLoginPageLoginClick();												// 发送登入成功广播						Youku.mContext.sendBroadcast(new Intent(LOGIN_BROADCAST));/*						new Thread(new Runnable() {							@Override							public void run() {								try {									DefaultHttpClient httpClient = new DefaultHttpClient(											createHttpParams());									HttpPost p = new HttpPost(URLContainer											.getPushCollectionURL(2, null));									p.setHeader("User-Agent", Youku.User_Agent);									HttpResponse r = httpClient.execute(p);									if (r.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {									}								} catch (ClientProtocolException e) {									Logger.e("LoginManagerImpl", e);								} catch (IOException e) {									Logger.e("LoginManagerImpl", e);								}catch (Exception e) {									Logger.e("LoginManagerImpl", e);								}							}						}).start();*/						return R.string.login_success;					} else if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_GATEWAY_TIMEOUT) {						return R.string.tips_not_responding;					} else {						return R.string.login_error_unknown;					}				} catch (Exception e) {					Logger.e("LoginManagerImpl", e);					return R.string.network_error;				}			}			@Override			protected void onPostExecute(Integer result) {				if(result == 0){					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("登录失败"));				}else if(result == -301){					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("验证码错误"));				}else if(result==-302){					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("验证码已过期"));				}else if(result==R.string.login_success){					if (call != null)						call.onSuccess();				}else if(result==R.string.tips_not_responding){					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo(										Youku.mContext.getResources().getString(												R.string.tips_not_responding)));				}else{					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo(										Youku.mContext.getResources().getString(												R.string.login_error_unknown)));				}								/*switch (result) {				case 0:					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("登录失败"));					break;				case -301:					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("验证码错误"));					break;				case -302:					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("验证码已过期"));					break;				case R.string.login_success:					if (call != null)						call.onSuccess();					break;				case R.string.tips_not_responding: // 弱网					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo(										Youku.context.getResources().getString(												R.string.tips_not_responding)));					break;				default:					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo(										Youku.context.getResources().getString(												R.string.login_error_unknown)));					break;				}*/				super.onPostExecute(result);			}		}.execute();	}	@Override	public void logout() {//		Logger.lxf("===执行登出操作==");//		YoukuUtil.showTips(R.string.tips_logout);//		// 取消正在下载的视频//		UploadInfo info = UploadProcessor.getUploadingTask();//		if (info != null) {//			info.setStatus(UploadInfo.STATE_PAUSE);//		}//		if (null != info && !TextUtils.isEmpty(info.getTaskId())) {//			NotificationManager nm = (NotificationManager) Youku.context//					.getSystemService(Context.NOTIFICATION_SERVICE);//			nm.cancel(Integer.parseInt(info.getTaskId()));//		}//		// List<UploadInfo> infos = UploadProcessor.getAllTasks();//		// if (infos != null && infos.size() > 0) {//		// for (UploadInfo singleInfo : infos)//		// nm.cancel(Integer.parseInt(singleInfo.getTaskId()));//		// }//		UploadProcessor.cancelUploadNotifaction();////		// 改变登录状态//		Youku.isLogined = false;//		Youku.userName = "";//		// 将登录状态存到本地//		Youku.savePreference("isNotAutoLogin", true);//		Youku.savePreference("isLogined", false);////		Youku.savePreference("uploadAccessToken", "");//		Youku.savePreference("uploadRefreshToken", "");//		Youku.savePreference("uid", "");//		Youku.savePreference("userIcon", "");//		Youku.savePreference("cookie", "");//		Youku.COOKIE = "";////		Youku.userprofile = null;//		// 发送登出成功广播//		Youku.context.sendBroadcast(new Intent(LOGOUT_BROADCAST));////		new Thread(new Runnable() {////			@Override//			public void run() {//				try {//					DefaultHttpClient httpClient = new DefaultHttpClient(//							createHttpParams());//					HttpPost p = new HttpPost(//							URLContainer.getPushCollectionURL(3, null));//					p.setHeader("User-Agent", Youku.User_Agent);//					HttpResponse r = httpClient.execute(p);//					if (r.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {//						// Youku.showTips("login collection success");//					}//				} catch (ClientProtocolException e) {//					Logger.e("LoginManagerImpl", e);//				} catch (IOException e) {//					Logger.e("LoginManagerImpl", e);//				}//			}//		}).start();	}	@Override	public void register(final String username, final String password,			final String email, final ICallBack call) {		new AsyncTask<Void, Void, Integer>() {			@Override			protected Integer doInBackground(Void... params) {				int result = R.string.login_error_unknown;				try {					BasicHttpParams httpParameters = new BasicHttpParams();					// 建立链接的时间					HttpConnectionParams.setConnectionTimeout(httpParameters,							15000);					// 等数据的时间					HttpConnectionParams.setSoTimeout(httpParameters, 15000);					DefaultHttpClient httpClient = new DefaultHttpClient(							httpParameters);					HttpPost httpPost = new HttpPost(URLContainer.getRegistURL(							username, password, email));					httpPost.setHeader("User-Agent", Youku.User_Agent);					HttpResponse httpResponse = httpClient.execute(httpPost);										if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {						Youku.COOKIE = getCookie(httpClient);						InputStream is = httpResponse.getEntity().getContent();						JSONObject obj = new JSONObject(								YoukuUtil.convertStreamToString(is));						String status = obj.optString("status");						state_code = obj.optInt("code");						if (!status.equals("success")) {							return state_code;						}						// Logger.lxf("==注册成功后返回的数据==json="+obj);						obj = obj.getJSONObject("results");						Youku.userName = obj.optString("username");						String uid = obj.optString("userid");						String userIcon = obj.optString("icon_large");						Youku.isLogined = true;						Youku.loginAccount = username;						Youku.savePreference("loginAccount", Youku.loginAccount);						Youku.savePreference("loginPassword",								YoukuUtil.md5(password));						Youku.savePreference("isNotAutoLogin", false);						Youku.savePreference("isLogined", true);						Youku.savePreference("cookie", Youku.COOKIE);						Youku.savePreference("userName", Youku.userName);						Youku.savePreference("uid", uid);						Youku.savePreference("userIcon", userIcon);						tipsChangeDigitNickName(Youku.userName);						result = R.string.login_error_unknown;					} else if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_BAD_REQUEST) {						InputStream is = httpResponse.getEntity().getContent();						String s = YoukuUtil.convertStreamToString(is);						JSONObject jo = new JSONObject(s);						return jo.optInt("code");					} else if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_GATEWAY_TIMEOUT) {						return R.string.tips_not_responding;					}				} catch (Exception e) {					Logger.e("LoginManagerImpl", e);					return R.string.network_error;				}				return result;			}			@Override			protected void onPostExecute(Integer result) {				if (result < 256 && result > 0) {					if (call != null)						call.onFailed(new LoginException().setErrorCode(result)								.setErrorInfo("未成功原因"));				} else if (R.string.login_error_unknown == result) {// 成功					if (call != null)						call.onSuccess();				} else {// 未知错误					call.onFailed(new LoginException().setErrorCode(-1)							.setErrorInfo("未知错误"));				}				super.onPostExecute(result);			}		}.execute();	}	/**	 * 获取标准 Cookie 并存储	 * 	 * @param httpClient	 */	private String getCookie(DefaultHttpClient httpClient) {		final List<Cookie> cookies = httpClient.getCookieStore().getCookies();		final StringBuilder s = new StringBuilder();		for (int i = 0, n = cookies.size(); i < n; i++) {			final Cookie cookie = cookies.get(i);			final String cookieName = cookie.getName();			final String cookieValue = cookie.getValue();			if (cookieName != null && cookieValue != null					&& cookieName.length() != 0 && cookieValue.length() != 0) {				s.append(cookieName).append("=").append(cookieValue)						.append(";");			}		}		return s.toString();	}	private HttpParams createHttpParams() {		HttpParams params = new BasicHttpParams();		HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);		HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);		HttpConnectionParams.setConnectionTimeout(params, CON_TIME_OUT_MS);		HttpConnectionParams.setSoTimeout(params, SO_TIME_OUT_MS);		HttpConnectionParams.setSocketBufferSize(params, SOCKET_BUFFER_SIZE);		return params;	}	/**	 * 如果用户是纯数字昵称，提醒去修改昵称	 * @param nickName	 */	private void tipsChangeDigitNickName(String nickName) {		if (!mIsAutoLogin && TextUtils.isDigitsOnly(Youku.userName)) {			YoukuUtil.showTips(R.string.tips_change_digit_nick_name);		}	}	@Override	public void isAutoLogin(boolean isAutoLogin) {		mIsAutoLogin = isAutoLogin;	}		private boolean mIsAutoLogin;}