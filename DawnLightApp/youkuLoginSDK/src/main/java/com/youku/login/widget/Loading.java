package com.youku.login.widget;import android.content.Context;import android.content.res.TypedArray;import android.graphics.drawable.AnimationDrawable;import android.util.AttributeSet;import android.view.View;import android.widget.ImageView;import com.example.youkuloginsdk.R;import com.youku.login.util.YoukuUtil;/** *  * 此类为Youku默认Loading控件，直接使用，如需要大Loading圈，则tag属性设置为h,如需要大Loading圈，则tag属性设置为l * @author 张宇 * @create-time Jan 16, 2012 3:58:09 PM * @version $Id *  *  */public class Loading extends ImageView {	private static final int LOADING_L = -1;	// private static final int LOADING_M = 0;	private static final int LOADING_H = 1;	private static final String NAME_SPACE = "http://schemas.android.com/apk/res/android";	private static final String TAG = "tag";	private int mLoadingMode;	private int mLoadingSize = YoukuUtil.dip2px(48);	public Loading(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);	}	public Loading(Context context, AttributeSet attrs) {		super(context, attrs);		int bg = R.anim.mobile_loading;		TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.NewLoading);		String loadingSize = ta.getString(R.styleable.NewLoading_loadingSize);		if(loadingSize == null){			setBackgroundResource(bg);			startAnimation();			ta.recycle();			return;		}		if(loadingSize.equals("large")){			mLoadingSize = YoukuUtil.dip2px(76);		}else if(loadingSize.equals("small")){			mLoadingSize = YoukuUtil.dip2px(16);		}				setBackgroundResource(bg);		startAnimation();		ta.recycle();	}	@Override	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {		setMeasuredDimension(mLoadingSize, mLoadingSize);	}	public void startAnimation() {		this.post(new Runnable() {			@Override			public void run() {				AnimationDrawable animationDrawable = (AnimationDrawable) Loading.this						.getBackground();				animationDrawable.start();			}		});	}	public void stopAnimation() {		this.post(new Runnable() {			@Override			public void run() {				AnimationDrawable animationDrawable = (AnimationDrawable) Loading.this						.getBackground();				animationDrawable.stop();			}		});	}	public Loading(Context context) {		super(context);	}	@Override	protected void onVisibilityChanged(View changedView, int visibility) {		super.onVisibilityChanged(changedView, visibility);		if (visibility == GONE || visibility == INVISIBLE) {			stopAnimation();		} else {			startAnimation();		}	}}